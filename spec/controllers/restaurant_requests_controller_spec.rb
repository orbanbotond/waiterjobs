require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe RestaurantRequestsController do
  # This should return the minimal set of attributes required to create a valid
  # RestaurantRequest. As you add validations to RestaurantRequest, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {}
  end
  
  describe "GET index" do
    describe "unauthenticated" do
      check_unauthenticated { get :index }
    end
    describe "authenticated" do
      it "assigns all restaurant_requests as @restaurant_requests" do
        authenticate
        restaurant_request = RestaurantRequest.create! valid_attributes
        get :index
        assigns(:restaurant_requests).should eq([restaurant_request])
      end
    end
  end

  describe "GET show" do
    before(:each) do
      @rest = RestaurantRequest.create! valid_attributes
    end
    describe "unauthenticated" do
      check_unauthenticated { get :show, :id => @rest.id.to_s }
    end
    describe "authenticated" do
      it "assigns the requested restaurant_request as @restaurant_request" do
        authenticate
        # restaurant_request = RestaurantRequest.create! valid_attributes
        restaurant_request = @rest
        get :show, :id => restaurant_request.id.to_s
        assigns(:restaurant_request).should eq(restaurant_request)
      end
    end
  end

  describe "GET new" do
    it "assigns a new restaurant_request as @restaurant_request" do
      get :new
      assigns(:restaurant_request).should be_a_new(RestaurantRequest)
    end
  end

  describe "GET edit" do
    before(:each) do
      @req = RestaurantRequest.create! valid_attributes
    end
    describe "unauthenticated" do
      check_unauthenticated { get :edit, :id => @req.id.to_s }
    end
    describe "authenticated" do
      before(:each) do
        authenticate
      end
      it "assigns the requested restaurant_request as @restaurant_request" do
        authenticate
        restaurant_request = @req
        get :edit, :id => restaurant_request.id.to_s
        assigns(:restaurant_request).should eq(restaurant_request)
      end      
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new RestaurantRequest" do
        expect {
          post :create, :restaurant_request => valid_attributes
        }.to change(RestaurantRequest, :count).by(1)
      end

      it "assigns a newly created restaurant_request as @restaurant_request" do
        post :create, :restaurant_request => valid_attributes
        assigns(:restaurant_request).should be_a(RestaurantRequest)
        assigns(:restaurant_request).should be_persisted
      end

      it "redirects to the 'thank you for registering page'" do
        post :create, :restaurant_request => valid_attributes
        response.should redirect_to( thank_you_for_registering_path)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved restaurant_request as @restaurant_request" do
        # Trigger the behavior that occurs when invalid params are submitted
        RestaurantRequest.any_instance.stub(:save).and_return(false)
        post :create, :restaurant_request => {}
        assigns(:restaurant_request).should be_a_new(RestaurantRequest)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        RestaurantRequest.any_instance.stub(:save).and_return(false)
        post :create, :restaurant_request => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "unauthenticated" do
      check_unauthenticated do
         restaurant_request = RestaurantRequest.create! valid_attributes
         put :update, :id => restaurant_request.id, :restaurant_request => {'these' => 'params'}
      end
    end
    describe "authenticated" do
      before(:each) do
        authenticate
      end
      describe "with valid params" do
        it "updates the requested restaurant_request" do
          restaurant_request = RestaurantRequest.create! valid_attributes
          RestaurantRequest.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
          put :update, :id => restaurant_request.id, :restaurant_request => {'these' => 'params'}
        end

        it "assigns the requested restaurant_request as @restaurant_request" do
          restaurant_request = RestaurantRequest.create! valid_attributes
          put :update, :id => restaurant_request.id, :restaurant_request => valid_attributes
          assigns(:restaurant_request).should eq(restaurant_request)
        end

        it "redirects to the restaurant_request" do
          restaurant_request = RestaurantRequest.create! valid_attributes
          put :update, :id => restaurant_request.id, :restaurant_request => valid_attributes
          response.should redirect_to(restaurant_request_review_path)
        end
      end

      describe "with invalid params" do
        it "assigns the restaurant_request as @restaurant_request" do
          restaurant_request = RestaurantRequest.create! valid_attributes
          # Trigger the behavior that occurs when invalid params are submitted
          RestaurantRequest.any_instance.stub(:save).and_return(false)
          put :update, :id => restaurant_request.id.to_s, :restaurant_request => {}
          assigns(:restaurant_request).should eq(restaurant_request)
        end

        it "re-renders the 'edit' template" do
          restaurant_request = RestaurantRequest.create! valid_attributes
          # Trigger the behavior that occurs when invalid params are submitted
          RestaurantRequest.any_instance.stub(:save).and_return(false)
          put :update, :id => restaurant_request.id.to_s, :restaurant_request => {}
          response.should render_template("edit")
        end
      end

    end
  end

  describe "DELETE destroy" do
    before(:each) do
      @req = RestaurantRequest.create! valid_attributes
    end
    describe "unauthenticated" do
      check_unauthenticated { delete :destroy, :id => @req.id.to_s}
    end
    describe "authenticated" do
      before(:each) do
        authenticate
      end
      it "destroys the requested restaurant_request" do
        restaurant_request = @req
        expect {
          delete :destroy, :id => restaurant_request.id.to_s
        }.to change(RestaurantRequest, :count).by(-1)
      end
      it "redirects to the restaurant_request_reviews list" do
        restaurant_request = RestaurantRequest.create! valid_attributes
        delete :destroy, :id => restaurant_request.id.to_s
        response.should redirect_to(restaurant_request_reviews_url)
      end
    end
  end

end
